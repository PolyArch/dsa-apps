Input32: agg_feat[16]
Input32: weights[16]
Input32: const

# for inner product, we need reduction tree
# for outer product, we can send this update to scratch
M0 = Mul32(agg_feat0, weights0)
M1 = Mul32(agg_feat1, weights1)
M2 = Mul32(agg_feat2, weights2)
M3 = Mul32(agg_feat3, weights3)
M4 = Mul32(agg_feat4, weights4)
M5 = Mul32(agg_feat5, weights5)
M6 = Mul32(agg_feat6, weights6)
M7 = Mul32(agg_feat7, weights7)

M8 = Mul32(agg_feat8, weights8)
M9 = Mul32(agg_feat9, weights9)
M10 = Mul32(agg_feat10, weights10)
M11 = Mul32(agg_feat11, weights11)
M12 = Mul32(agg_feat12, weights12)
M13 = Mul32(agg_feat13, weights13)
M14 = Mul32(agg_feat14, weights14)
M15 = Mul32(agg_feat15, weights15)

A0 = Add32(M0, M1)
A1 = Add32(M2, M3)
A2 = Add32(M4, M5)
A3 = Add32(M6, M7)
A4 = Add32(M8, M9) 
A5 = Add32(M10, M11) 
A6 = Add32(M12, M13) 
A7 = Add32(M14, M15) 

A8 = Add32(A0, A1)
A9 = Add32(A2, A3)
A10 = Add32(A4, A5)
A11 = Add32(A6, A7)

A12 = Add32(A8, A9)
A13 = Add32(A10, A11)

A = Add32(A12, A13)

sum = Acc32(A, control=const{0:d, 1:r})

Output32: sum
