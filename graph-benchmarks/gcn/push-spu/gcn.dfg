Input32: offset_list0
Input32: offset_list1
Input32: weights[16]
Input32: const
Input32: const2
Input32: red

Input32: scr_addr_in[16]
Input32: scr_val_in[16]

row_size = Sub32(offset_list1, offset_list0)
start_ind = offset_list0

cnt = Acc32(1, control=scr_addr_in0{4:d})
flag = ICmpNE32(And32(cnt, 3),0) # true if not equal to 0 ie. not a multiple of 4

# when flag is true, consume the scr_addr which is nodes left
nodes_left = Keep32(scr_addr_in0, 1, control=flag{1:d})
new_nodes_left = Sub32(nodes_left, 1)

should_not_do_mult = ICmpNE32(new_nodes_left, 0) # if 1, copy output of additions here
should_do_mult = Select32(1, 0, should_not_do_mult)

real_out0 = Add32(scr_addr_in0, scr_val_in0)
real_out1 = Add32(scr_addr_in1, scr_val_in1)
real_out2 = Add32(scr_addr_in2, scr_val_in2)
real_out3 = Add32(scr_addr_in3, scr_val_in3)
real_out4 = Add32(scr_addr_in4, scr_val_in4)
real_out5 = Add32(scr_addr_in5, scr_val_in5)
real_out6 = Add32(scr_addr_in6, scr_val_in6)
real_out7 = Add32(scr_addr_in7, scr_val_in7)
real_out8 = Add32(scr_addr_in8, scr_val_in8)
real_out9 = Add32(scr_addr_in9, scr_val_in9)
real_out10 = Add32(scr_addr_in10, scr_val_in10)
real_out11 = Add32(scr_addr_in11, scr_val_in11)
real_out12 = Add32(scr_addr_in12, scr_val_in12)
real_out13 = Add32(scr_addr_in13, scr_val_in13)
real_out14 = Add32(scr_addr_in14, scr_val_in14)
real_out15 = Add32(scr_addr_in15, scr_val_in15)

real2_out0 = Select32(new_nodes_left, real_out0, flag)

# agg feat values should be 127 values (1 value is wrong..)
agg_feat0 = Keep32(real2_out0, should_do_mult)
agg_feat1 = Keep32(real_out1, should_do_mult)
agg_feat2 = Keep32(real_out2, should_do_mult)
agg_feat3 = Keep32(real_out3, should_do_mult)
agg_feat4 = Keep32(real_out4, should_do_mult)
agg_feat5 = Keep32(real_out5, should_do_mult)
agg_feat6 = Keep32(real_out6, should_do_mult)
agg_feat7 = Keep32(real_out7, should_do_mult)
agg_feat8 = Keep32(real_out8, should_do_mult)

agg_feat9 = Keep32(real_out9, should_do_mult)

agg_feat10 = Keep32(real_out10, should_do_mult)
agg_feat11 = Keep32(real_out11, should_do_mult)
agg_feat12 = Keep32(real_out12, should_do_mult)
agg_feat13 = Keep32(real_out13, should_do_mult)
agg_feat14 = Keep32(real_out14, should_do_mult)
agg_feat15 = Keep32(real_out15, should_do_mult)

# after atomic update
scr_out0 = real2_out0 real_out1
scr_out1 = real_out2 real_out3
scr_out2 = real_out4 real_out5
scr_out3 = real_out6 real_out7
scr_out4 = real_out8 real_out9
scr_out5 = real_out10 real_out11
scr_out6 = real_out12 real_out13
scr_out7 = real_out14 real_out15


running_sum = Acc32(1, control=const{0:r})
sum = Acc32(red, control=const2{0:d,1:r})

# for inner product, we need reduction tree
# for outer product, we can send this update to scratch
M0 = Mul32(agg_feat0, weights0)
M1 = Mul32(agg_feat1, weights1)
M2 = Mul32(agg_feat2, weights2)
M3 = Mul32(agg_feat3, weights3)
M4 = Mul32(agg_feat4, weights4)
M5 = Mul32(agg_feat5, weights5)
M6 = Mul32(agg_feat6, weights6)
M7 = Mul32(agg_feat7, weights7)

M8 = Mul32(agg_feat8, weights8)
M9 = Mul32(agg_feat9, weights9)
M10 = Mul32(agg_feat10, weights10)
M11 = Mul32(agg_feat11, weights11)
M12 = Mul32(agg_feat12, weights12)
M13 = Mul32(agg_feat13, weights13)
M14 = Mul32(agg_feat14, weights14)
M15 = Mul32(agg_feat15, weights15)

A0 = Add32(M0, M1)
A1 = Add32(M2, M3)
A2 = Add32(M4, M5)
A3 = Add32(M6, M7)
A4 = Add32(M8, M9) 
A5 = Add32(M10, M11) 
A6 = Add32(M12, M13) 
A7 = Add32(M14, M15) 

A8 = Add32(A0, A1)
A9 = Add32(A2, A3)
A10 = Add32(A4, A5)
A11 = Add32(A6, A7)

A12 = Add32(A8, A9)
A13 = Add32(A10, A11)

A = Add32(A12, A13)

Output32: running_sum
Output32: sum
Output32: start_ind
Output32: row_size
Output32: A

Output: scr_out[8]
