Input16: dest_id [4]
Input16: prev_vert_dist [4]
Input16: offset_list [2]

Input16: pass1
Input: barrier_i
Input: barrier_i2

# Sparsification code -- find the set of active vertices
Input16: prev_dens_dist
Input16: cur_iter

active_flag = ICmpEQ(prev_dens_dist, cur_iter)
prev_dist = Keep16(prev_dens_dist, active_flag)
inc_prev_ind = Acc16(1, Mul16(Not(active_flag),2))

prev_ind = Sub16(inc_prev_ind,1)

# phase2_signal = ICmpEQ(prev_dens_dist, 0) # iter won't be 0

phase2_signal = ICmpEQ(prev_dens_dist, 65534) # this tells if discard or not
# active_list_size = Acc16(1, Mul16(Not(active_flag),4), control=phase2_signal{0:d})
temp_list_size = Acc16(1, Mul16(Not(active_flag),4))
active_list_size = Keep16(temp_list_size, phase2_signal)

temp = Sub16(offset_list1, offset_list0)

# Edge weight = 1 in bfs
out_val0 = Add16(1,prev_vert_dist0)
out_val1 = Add16(1,prev_vert_dist1)
out_val2 = Add16(1,prev_vert_dist2)
out_val3 = Add16(1,prev_vert_dist3)

start_ind = offset_list0

row_size1 = Add16(temp, 0)
row_size2 = Div16(temp, 1)

x = out_val0 out_val1
val = x out_val2 out_val3

y = dest_id0 dest_id1
addr = y dest_id2 dest_id3

# check the sentinal
end_signal = Add16(dest_id0, prev_vert_dist0)
# flag = ICmpEq16(end_signal, 41)
# done = Keep(1, flag)

flag = ICmpEq16(end_signal, 3353)
done = Keep16(1, flag)

pass2 = pass1
# TODO: could be done using indirect ports
barrier_o = barrier_i
barrier_o2 = barrier_i2

Output: val
Output: addr
Output16: row_size1
Output16: row_size2
Output16: start_ind
# Output: done
Output16: done

Output16: pass2
Output: barrier_o
Output: barrier_o2

Output16: prev_dist # recur to pass1
Output16: prev_ind # send to offset list
Output: active_list_size
